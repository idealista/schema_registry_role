---
## TODO: Remember to adapt goss tests to your convenience

service:
  {{ schema_registry_group }}:
    enabled: true
    running: true


user:
  {{ schema_registry_user }}:
    exists: true
    groups:
      - {{ schema_registry_group }}

group:
  {{ schema_registry_group }}:
    exists: true

      
http:
  # Registering valid schema
  http://{{ schema_registry_host_name }}:{{ schema_registry_port }}/subjects/Kafka-value/versions:
    # required attributes
    status: 200
    # optional attributes
    timeout: 1000
    request-headers: # Set request header values
       - "Content-Type: application/vnd.schemaregistry.v1+json"
    request-body: '{"schema":"{\"type\":\"record\",\"name\":\"v1\",\"fields\":[{\"name\":\"User\",\"type\":\"string\"}]}"}' # request body
    body: ['{"id":1}'] # Check http response content for these patterns
    method: POST # http method
      
  # Registering invalid schema due to FULL_TRANSITIVE compatibility
  http://{{ schema_registry_host_name }}:{{ schema_registry_port }}/subjects/Kafka-value/versions:
    # required attributes
    status: 409
    # optional attributes
    timeout: 1000
    request-headers: # Set request header values
       - "Content-Type: application/vnd.schemaregistry.v1+json"
    request-body: '{"schema":"{\"type\":\"record\",\"name\":\"v1\",\"fields\":[{\"name\":\"User\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}"}' # request body
    body: ['Schema being registered is incompatible with an earlier schema for subject \"Kafka-value\"'] # Check http response content for these patterns
    method: POST # http method

  # Registering new version of valid schema
  http://{{ schema_registry_host_name }}:{{ schema_registry_port }}/subjects/Kafka-value/versions:
    # required attributes
    status: 200
    # optional attributes
    timeout: 1000
    request-headers: # Set request header values
       - "Content-Type: application/vnd.schemaregistry.v1+json"
    request-body: '{"schema":"{\"type\":\"record\",\"name\":\"v1\",\"fields\":[{\"name\":\"User\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\",\"default\":\"2\"}]}"}' # request body
    body: ['{"id":2}'] # Check http response content for these patterns
    method: POST # http method
    
